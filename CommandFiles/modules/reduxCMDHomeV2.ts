/*
  WARNING: This source code is created by Liane Cagara.
  Any unauthorized modifications or attempts to tamper with this code 
  can result in severe consequences, including a global ban from my server.
  Proceed with extreme caution and refrain from any unauthorized actions.
*/

// SpectraRework !

import { UNIRedux } from "./unisym.js";

export type Config = {
  key: string;
  handler: (
    ctx: CommandContext,
    extra: {
      targets: Config[];
      key: string;
      itemList?: string | undefined;
    } & Record<string, unknown>
  ) => any | Promise<any>;
  description?: string | null;
  args?: string[] | null;
  aliases?: string[] | null;
};

export class ReduxCMDHome {
  configs: Config[];
  options: {
    home?: Config["handler"];
    isHypen?: boolean;
    argIndex?: number;
    setup?: Config["handler"];
  };

  constructor(
    {
      home,
      isHypen = false,
      argIndex = 0,
      setup = () => {},
      entryConfig,
      entryInfo,
    }: {
      home?: Config["handler"];
      isHypen?: boolean;
      argIndex?: number;
      setup?: Config["handler"];
      entryConfig?: Record<string, Config["handler"] | CommandEntry>;
      entryInfo?: { [key: string]: null | Partial<Config> };
    },
    configs?: Config[]
  ) {
    if (entryConfig) {
      configs = Object.entries(entryConfig).map(([key, handler]) => ({
        key,
        handler,
        ...(entryInfo[key] ?? {}),
      }));
      isHypen = true;
      argIndex = 0;
    }
    this.configs = configs;

    this.options = { home, isHypen, argIndex, setup };
  }

  async runInContext(ctx: CommandContext) {
    const { input, output } = ctx;
    const key: string =
      this.options.isHypen && "propertyArray" in input
        ? input.propertyArray[this.options.argIndex]
        : input.arguments[this.options.argIndex];

    const targets = this.configs.filter((i) => {
      if (i.key === key || i.key.toLowerCase() === String(key).toLowerCase()) {
        return true;
      }

      if (Array.isArray(i.aliases)) {
        return (
          i.aliases.includes(key) ||
          i.aliases.some(
            (j) =>
              String(j).toLowerCase() === String(key).toLowerCase() ||
              String(j).replace("-", "").toLowerCase() ===
                String(key).replace("-", "").toLowerCase()
          )
        );
      }
    });

    const extraCTX: Parameters<Config["handler"]>["1"] = {
      targets,
      key,
      itemList: null,
    };

    try {
      await this.options.setup(ctx, extraCTX);
    } catch (error) {
      console.error("Error during setup:", error);
      return output.error(error);
    }

    if (targets.length > 0) {
      for (const { handler } of targets) {
        try {
          await handler(ctx, extraCTX);
        } catch (error) {
          console.error("Error during handler execution:", error);
          return output.error(error);
        }
      }
    } else {
      const { home } = this.options;
      const newArgs = [ctx.commandName, ...input.arguments];

      const slicedArgs = newArgs.slice(0, this.options.argIndex + 1);

      const itemList = this.createItemLists(
        this.configs,
        this.options.isHypen ? ctx.commandName : slicedArgs.join(" "),
        ctx.prefix
      );

      console.log(
        "No matching targets found, calling home function with itemList:",
        itemList
      );
      ctx.cancelCooldown?.();

      if (typeof home === "function") {
        try {
          await home(ctx, { ...extraCTX, itemList });
        } catch (error) {
          console.error("Error during home function execution:", error);
          return output.error(error);
        }
      } else {
        await output.reply(
          `${UNIRedux.burger} **Options**\n\n${itemList}\n\n${UNIRedux.standardLine}\nAuto-Generated by ${UNIRedux.reduxMark}`
        );
      }
    }
  }

  createItemList(
    config: Config,
    commandName: string,
    prefix = global.Cassidy.config.PREFIX
  ) {
    console.log(
      `Creating item list for command: ${commandName} with prefix: ${prefix}`
    );
    return (
      `${UNIRedux.disc} **${prefix}${commandName}${
        this.options.isHypen ? "-" : " "
      }${config.key}** [font=fancy_italic]${
        Array.isArray(config.args) ? config.args.join(" ") : ""
      }[:font=fancy_italic]${
        typeof config.description === "string"
          ? `\n${UNIRedux.charm} ${config.description}`
          : ""
      }` +
      (!Array.isArray(config.aliases)
        ? ""
        : `\n[font=fancy_italic]Aliases: ${config.aliases.join(
            ", "
          )}[:font=fancy_italic]`)
    );
  }

  createItemLists(
    configs: Config[],
    commandName: string,
    prefix = global.Cassidy.config.PREFIX
  ) {
    return configs
      .map((i) => this.createItemList(i, commandName, prefix))
      .join("\n\n");
  }
}
